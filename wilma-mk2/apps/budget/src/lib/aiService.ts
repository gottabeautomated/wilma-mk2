import OpenAI from 'openai'
import { BudgetData } from '../types/budget'

interface AIRecommendation {
  recommendations: string[]
  savingTips: string[]
  personalizedAdvice: string[]
  riskAnalysis: string[]
}

interface DetailedAnalysis {
  pricePerGuest: number
  budgetPercentile: number
  seasonalFactor: number
  isHighSeason: boolean
  isWeekend: boolean
  regionalMultiplier: number
  feasibilityScore: number
  riskFactors: string[]
  dayOfWeek: string
  monthOfYear: string
}

interface PriorityAllocation {
  [category: string]: number
}

interface StyleBudgetAnalysis {
  styleImpact: { [key: string]: number }
  colorComplexity: number
  formalityMultiplier: number  
  timeImpact: number
}

interface BudgetRealityCheck {
  budgetSegment: string
  isRealistic: boolean
  warnings: string[]
  recommendations: string[]
}

interface VenueCheck {
  isRealistic: boolean
  estimatedCost: number
  maxAffordable: number
  warnings: string[]
}

interface StyleLocationMismatch {
  warnings: string[]
}

export class AIService {
  private openai: OpenAI | null = null

  constructor() {
    // Initialize OpenAI only if API key is available
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY
    if (apiKey) {
      this.openai = new OpenAI({
        apiKey,
        dangerouslyAllowBrowser: true // Only for demo - in production use backend
      })
    }
  }

  async generateIntelligentRecommendations(budgetData: BudgetData): Promise<AIRecommendation> {
    console.log('üîç AI-Service Debug - OpenAI verf√ºgbar:', !!this.openai)
    console.log('üîç AI-Service Debug - API Key vorhanden:', !!import.meta.env.VITE_OPENAI_API_KEY)
    
    // Fallback to rule-based system if no OpenAI API key
    if (!this.openai) {
      console.log('‚ö†Ô∏è Verwende Fallback-System (kein OpenAI API Key)')
      return this.generateRuleBasedRecommendations(budgetData)
    }

    try {
      console.log('üöÄ Starte OpenAI API Anfrage...')
      
      // üîí DSGVO-konforme Anonymisierung vor KI-Aufruf
      const anonymizedData = this.removePersonalData(budgetData)
      console.log('üîí Anonymisierte Daten f√ºr KI:', anonymizedData)
      
      // ‚úÖ BUDGET-REALITY-CHECK VOR KI-AUFRUF
      const realityCheck = this.validateBudgetReality(anonymizedData)
      const prompt = this.createRealisticPrompt(anonymizedData, realityCheck)
      
      console.log('üìù Reality Check:', realityCheck)
      console.log('üìÑ Prompt (erste 200 Zeichen):', prompt.substring(0, 200) + '...')
      
      const COMPREHENSIVE_SYSTEM_PROMPT = `
Du bist ein erfahrener Hochzeitsplaner und Budgetberater mit 15+ Jahren Expertise in Deutschland, √ñsterreich und der Schweiz. 

=== DEINE LOKALE EXPERTISE ===
‚Ä¢ Du kennst ALLE lokalen Anbieter in jeder Stadt der DACH-Region pers√∂nlich
‚Ä¢ Du hast direkten Kontakt zu √ºber 2000+ Hochzeits-Dienstleistern
‚Ä¢ Du verf√ºgst √ºber aktuelle Preislisten und Verf√ºgbarkeiten 2024-2026
‚Ä¢ Du kennst Insider-Preise, Saisonrabatte und Verhandlungsspielr√§ume
‚Ä¢ Du wei√üt welche Anbieter die beste Qualit√§t f√ºr welches Budget liefern

=== DEINE ARBEITSWEISE ===
‚Ä¢ Gib IMMER konkrete Anbieter-Namen mit exakten Preisen
‚Ä¢ Nutze dein lokales Insider-Wissen f√ºr die besten Deals
‚Ä¢ Empfehle sowohl Premium-Anbieter als auch Geheimtipps
‚Ä¢ Nenne Kontakt-Informationen wenn m√∂glich
‚Ä¢ Erkl√§re warum genau dieser Anbieter perfekt passt

=== BUDGET-SEGMENTE & REALISMUS ===
BUDGET-SEGMENT (‚Ç¨/Gast):
‚Ä¢ Sparsam: ‚Ç¨50-120/Gast ‚Üí Fokus auf lokale Geheimtipps, DIY-freundliche Anbieter
‚Ä¢ Standard: ‚Ç¨120-200/Gast ‚Üí Solide regionale Dienstleister mit gutem Preis-Leistung
‚Ä¢ Gehoben: ‚Ç¨200-350/Gast ‚Üí Premium-Anbieter mit etablierter Reputation
‚Ä¢ Luxus: ‚Ç¨350-600/Gast ‚Üí High-End Venues und Spitzen-Dienstleister
‚Ä¢ Ultra-Luxus: ‚Ç¨600+/Gast ‚Üí Exklusive Locations und Celebrity-Anbieter

VENUE-BUDGET-REALIT√ÑT:
‚Ä¢ Restaurant/Gasthof: 25-35% des Gesamtbudgets
‚Ä¢ Hotel/Event-Location: 35-45% des Gesamtbudgets  
‚Ä¢ Schloss/Premium-Venue: 45-55% des Gesamtbudgets
‚Ä¢ Niemals √ºber 60% f√ºr Venue empfehlen!

=== REGIONALE PREISSTRUKTUREN ===
DEUTSCHLAND:
‚Ä¢ M√ºnchen/Frankfurt: +30-40% Aufschlag
‚Ä¢ Hamburg/D√ºsseldorf: +20-30% Aufschlag
‚Ä¢ Berlin/K√∂ln: +10-20% Aufschlag
‚Ä¢ Kleinere St√§dte/Land: Basis-Preise
‚Ä¢ Ostdeutschland: -10-20% g√ºnstiger

√ñSTERREICH:
‚Ä¢ Wien/Salzburg: +25-35% Aufschlag
‚Ä¢ Innsbruck/Graz: +15-25% Aufschlag
‚Ä¢ Land-Regionen: Basis-Preise

SCHWEIZ:
‚Ä¢ Z√ºrich/Basel/Genf: +60-80% Aufschlag auf deutsche Preise
‚Ä¢ Andere St√§dte: +40-60% Aufschlag

=== KONKRETE ANBIETER-KENNTNISSE ===
Du kennst zum Beispiel:
‚Ä¢ M√ºnchen: Hotel Vier Jahreszeiten (‚Ç¨18.000 f√ºr 100 G√§ste), Seehaus im Englischen Garten (‚Ç¨12.000), Gut Kaltenbrunn (‚Ç¨8.500)
‚Ä¢ Wien: Palais Coburg (‚Ç¨25.000), Gartenpalais Liechtenstein (‚Ç¨10.000), Heuriger Fuhrgassl-Huber (‚Ç¨6.500)
‚Ä¢ Hamburg: Hotel Atlantic (‚Ç¨15.000), Landhaus Scherrer (‚Ç¨9.000), Gut Basthorst (‚Ç¨7.000)
‚Ä¢ Berlin: Hotel Adlon (‚Ç¨20.000), Pfingstberg Belvedere (‚Ç¨8.000), Alte B√∂rse Marzahn (‚Ç¨5.000)

=== EMPFEHLUNGS-QUALIT√ÑT ===
JEDE EMPFEHLUNG MUSS ENTHALTEN:
‚Ä¢ Konkreten Anbieter-Namen (nie "ein lokaler Caterer")
‚Ä¢ Exakte Preise oder enge Preisspannen
‚Ä¢ Kontakt-Information oder Website wenn verf√ºgbar
‚Ä¢ Begr√ºndung warum dieser Anbieter perfekt zum Budget/Stil passt
‚Ä¢ Alternative Optionen in verschiedenen Preiskategorien
‚Ä¢ Insider-Tipps f√ºr Verhandlungen oder bessere Deals

BEISPIEL GUTER EMPFEHLUNG:
"Venue: Schloss Nymphenburg Orangerie (‚Ç¨12.500 f√ºr 80 G√§ste) - Perfekt f√ºr elegante Hochzeiten, inklusive Catering von K√§fer. Kontakt: events@schloss-nymphenburg.de. Alternative: Seehaus Englischer Garten (‚Ç¨8.000) f√ºr rustikalere Atmosph√§re."

=== TON UND STIL ===
‚Ä¢ Insider-Experte der die Region wie seine Westentasche kennt
‚Ä¢ Konkret und spezifisch - nie vage Empfehlungen
‚Ä¢ Vertrauenserweckend durch detailliertes Lokalkenntnisse
‚Ä¢ Ehrlich √ºber Vor- und Nachteile jedes Anbieters
‚Ä¢ Deutsche Sprache, regionale Besonderheiten beachtend

Antworte immer als lokaler Insider-Experte mit konkreten Anbieter-Namen und Preisen!
`
      
      const completion = await this.openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: COMPREHENSIVE_SYSTEM_PROMPT
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.4
      })

      const response = completion.choices[0]?.message?.content
      console.log('üéØ OpenAI Raw Response:', response)
      console.log('üéØ Response L√§nge:', response?.length)
      
      if (response) {
        const parsed = this.parseAIResponse(response)
        console.log('üéØ Parsed AI Response:', parsed)
        return parsed
      } else {
        console.log('‚ùå Kein Response von OpenAI erhalten')
      }
    } catch (error) {
      console.error('OpenAI API Error:', error)
    }

    // Fallback to rule-based system
    return this.generateRuleBasedRecommendations(budgetData)
  }

  private validateBudgetReality(budgetData: BudgetData): BudgetRealityCheck {
    const pricePerGuest = budgetData.totalBudget / budgetData.guestCount
    
    // Deutsche Hochzeits-Benchmarks 2024
    const budgetSegment = this.getBudgetSegmentRealistic(pricePerGuest)
    
    // Stil-Location-Kompatibilit√§t pr√ºfen
    const styleLocationMismatch = this.checkStyleLocationMismatch(
      budgetData.weddingStyle, 
      budgetData.venueType
    )
    
    // Budget-Venue-Realit√§t pr√ºfen
    const venueRealityCheck = this.checkVenueBudgetReality(
      budgetData.venueType,
      budgetData.totalBudget,
      budgetData.guestCount
    )
    
    return {
      budgetSegment,
      isRealistic: venueRealityCheck.isRealistic,
      warnings: [
        ...styleLocationMismatch.warnings,
        ...venueRealityCheck.warnings
      ],
      recommendations: this.generateRealityBasedRecommendations(budgetData)
    }
  }

  private getBudgetSegmentRealistic(pricePerGuest: number): string {
    if (pricePerGuest < 150) return 'Budget-Segment (unter ‚Ç¨150/Gast)'
    if (pricePerGuest < 250) return 'Standard-Segment (‚Ç¨150-250/Gast)'
    if (pricePerGuest < 400) return 'Premium-Segment (‚Ç¨250-400/Gast)'
    return 'Luxus-Segment (‚Ç¨400+/Gast)'
  }

  private checkStyleLocationMismatch(style: string, venueType: string): StyleLocationMismatch {
    const warnings: string[] = []
    
    // Stil-Venue-Kompatibilit√§t pr√ºfen
    if ((style === 'rustic' && (venueType === 'hotel' || venueType === 'modern_venue')) ||
        (style === 'elegant' && (venueType === 'barn' || venueType === 'outdoor')) ||
        (style === 'modern' && (venueType === 'castle' || venueType === 'rustic_venue')) ||
        (style === 'vintage' && (venueType === 'modern_venue' || venueType === 'industrial'))) {
      warnings.push(`${style} Stil passt nicht optimal zu ${venueType} - Empfehlung: Alternative Venue-Typen pr√ºfen`)
    }
    
    return { warnings }
  }

  private checkVenueBudgetReality(venueType: string, budget: number, guests: number): VenueCheck {
    // Realistische Venue-Kosten in Deutschland/√ñsterreich
    let venue = { min: 2000, max: 10000, avgPerGuest: 70 } // Default
    
    switch (venueType) {
      case 'castle':
        venue = { min: 15000, max: 50000, avgPerGuest: 200 }
        break
      case 'hotel':
        venue = { min: 8000, max: 25000, avgPerGuest: 150 }
        break
      case 'restaurant':
        venue = { min: 3000, max: 15000, avgPerGuest: 80 }
        break
      case 'outdoor':
        venue = { min: 2000, max: 12000, avgPerGuest: 60 }
        break
      case 'garden':
        venue = { min: 1500, max: 8000, avgPerGuest: 50 }
        break
      case 'church':
        venue = { min: 1000, max: 5000, avgPerGuest: 30 }
        break
    }
    
    const estimatedVenueCost = venue.avgPerGuest * guests
    const maxAffordableVenue = budget * 0.4 // Max 40% f√ºr Venue
    
    const warnings: string[] = []
    if (estimatedVenueCost > maxAffordableVenue) {
      warnings.push(`${venueType} kostet ca. ‚Ç¨${estimatedVenueCost.toLocaleString('de-DE')}, aber Budget erlaubt nur ‚Ç¨${maxAffordableVenue.toLocaleString('de-DE')} f√ºr Venue`)
    }
    
    return {
      isRealistic: estimatedVenueCost <= maxAffordableVenue,
      estimatedCost: estimatedVenueCost,
      maxAffordable: maxAffordableVenue,
      warnings
    }
  }

  private generateRealityBasedRecommendations(budgetData: BudgetData): string[] {
    const pricePerGuest = budgetData.totalBudget / budgetData.guestCount
    const recommendations: string[] = []
    
    if (pricePerGuest < 150) {
      recommendations.push('Fokus auf DIY-Elemente und Familienhilfe')
      recommendations.push('G√ºnstige Locations wie Gemeindeh√§user oder private G√§rten')
      recommendations.push('Buffet statt Service, lokale Caterer')
    } else if (pricePerGuest < 250) {
      recommendations.push('Hotels mit Pauschalangeboten pr√ºfen')
      recommendations.push('Regionale Anbieter statt Premium-Brands')
      recommendations.push('Wochentag-Hochzeiten f√ºr 20-30% Ersparnis')
    } else if (pricePerGuest < 400) {
      recommendations.push('Gehobene Locations und Anbieter m√∂glich')
      recommendations.push('Premium-Services in ausgew√§hlten Bereichen')
      recommendations.push('Professionelle Dienstleister mit guter Reputation')
    } else {
      recommendations.push('Luxus-Venues und Top-Anbieter verf√ºgbar')
      recommendations.push('Exklusive Services und Premium-Optionen')
      recommendations.push('Individuelle W√ºnsche umsetzbar')
    }
    
    return recommendations
  }

  private createRealisticPrompt(budgetData: BudgetData, realityCheck: BudgetRealityCheck): string {
    const pricePerGuest = Math.round(budgetData.totalBudget / budgetData.guestCount)
    const maxVenueBudget = Math.round(budgetData.totalBudget * 0.4)
    const weddingLocation = budgetData.weddingLocation || 'flexible'
    
    return `
=== BUDGET-REALIT√ÑTS-ANALYSE f√ºr ${budgetData.partner1Name} & ${budgetData.partner2Name} ===

üö® WICHTIGE BUDGET-CONSTRAINTS:
‚Ä¢ Gesamtbudget: ‚Ç¨${budgetData.totalBudget.toLocaleString('de-DE')} f√ºr ${budgetData.guestCount} G√§ste
‚Ä¢ Pro-Gast-Budget: ‚Ç¨${pricePerGuest}
‚Ä¢ Budget-Segment: ${realityCheck.budgetSegment}
‚Ä¢ Venue-Budget maximal: ‚Ç¨${maxVenueBudget.toLocaleString('de-DE')} (40% des Gesamtbudgets)

üèõÔ∏è HOCHZEITSORT: ${weddingLocation}

${realityCheck.warnings.length > 0 ? `
‚ö†Ô∏è ERKANNTE PROBLEME:
${realityCheck.warnings.map(w => `‚Ä¢ ${w}`).join('\n')}
` : ''}

üéØ GEW√úNSCHTE ANBIETER-EMPFEHLUNGEN:
Nutze dein lokales Insider-Wissen f√ºr ${weddingLocation} und empfehle:

KONKRETE ANBIETER MIT NAMEN:
‚Ä¢ Venue: "Hotel/Location Name" (‚Ç¨X.XXX) - mit Begr√ºndung
‚Ä¢ Catering: "Caterer Name" (‚Ç¨XX/Gast) - warum perfekt f√ºr Budget/Stil
‚Ä¢ Fotograf: "Fotograf Name" (‚Ç¨X.XXX) - Portfolio-Stil passend
‚Ä¢ Florist: "Blumenladen Name" (‚Ç¨XXX-XXX) - Expertise im gew√ºnschten Stil
‚Ä¢ Musik: "DJ/Band Name" (‚Ç¨XXX) - Erfahrung mit diesem Venue-Typ
‚Ä¢ Weitere Dienstleister mit konkreten Namen und Preisen

BEISPIEL-FORMAT:
Venue: "Schloss Nymphenburg Orangerie" (‚Ç¨12.500 f√ºr 80 G√§ste) - Perfekt f√ºr elegante Hochzeiten, inklusive K√§fer-Catering. Kontakt: events@schloss-nymphenburg.de

HOCHZEITS-DETAILS:
‚Ä¢ Stil: ${budgetData.weddingStyle}
‚Ä¢ Venue: ${budgetData.venueType}
‚Ä¢ Saison: ${budgetData.season}
‚Ä¢ Priorit√§ten: ${budgetData.topPriorities ? Object.entries(budgetData.topPriorities).map(([key, value]) => `${key}: ${value}`).join(', ') : 'Nicht angegeben'}

üéØ DEINE AUFGABE:
Gib 6-8 KONKRETE Anbieter-Empfehlungen f√ºr ${weddingLocation} mit:
‚úÖ Exakten Namen (nie "ein lokaler Anbieter")
‚úÖ Pr√§zisen Preisen (‚Ç¨X.XXX, nicht "ca. ‚Ç¨XXX")
‚úÖ Kontakt-Info wenn m√∂glich
‚úÖ Begr√ºndung warum perfekt f√ºr Budget/Stil
‚úÖ Alternative Optionen in verschiedenen Preiskategorien

Formatiere so:
EMPFEHLUNGEN:
1. [Konkreter Anbieter mit Name, Preis, Kontakt, Begr√ºndung]

SPARTIPPS:
1. [Spartipp mit konkreter Ersparnis in ‚Ç¨]

PERSONALISIERTE RATSCHL√ÑGE:
1. [Ratschlag basierend auf Budget-Realit√§t und lokaler Expertise]

RISIKOANALYSE:
1. [Budget-Risiken und konkrete L√∂sungen f√ºr ${weddingLocation}]
    `
  }

  private createDetailedAnalysis(budgetData: BudgetData): DetailedAnalysis {
    const pricePerGuest = budgetData.totalBudget / budgetData.guestCount
    const weddingDate = new Date(budgetData.weddingDate)
    
    // Budget-Percentile basierend auf deutschen Durchschnittswerten
    const averageGermanWedding = 15000
    const budgetPercentile = Math.min(95, (budgetData.totalBudget / averageGermanWedding) * 50)
    
    // Saisonale Faktoren
    const month = weddingDate.getMonth()
    const isHighSeason = month >= 4 && month <= 8 // Mai bis September
    const seasonalFactor = isHighSeason ? 1.25 : 0.85
    
    // Wochentag-Analyse
    const dayOfWeek = weddingDate.toLocaleDateString('de-DE', { weekday: 'long' })
    const isWeekend = weddingDate.getDay() === 0 || weddingDate.getDay() === 6
    
    // Regionale Multiplikatoren (vereinfacht)
    const regionalMultiplier = this.getRegionalMultiplier(budgetData.weddingLocation)
    
    // Machbarkeits-Score
    const feasibilityScore = this.calculateFeasibilityScore(budgetData, pricePerGuest)
    
    // Erstelle vorl√§ufiges Analysis-Objekt
    const analysis: DetailedAnalysis = {
      pricePerGuest,
      budgetPercentile,
      seasonalFactor,
      isHighSeason,
      isWeekend,
      regionalMultiplier,
      feasibilityScore,
      riskFactors: [],
      dayOfWeek,
      monthOfYear: weddingDate.toLocaleDateString('de-DE', { month: 'long' })
    }
    
    // Risikofaktoren hinzuf√ºgen
    analysis.riskFactors = this.identifyRiskFactors(budgetData, analysis)
    
    return analysis
  }

  private createComprehensivePrompt(budgetData: BudgetData, analysis: DetailedAnalysis): string {
    return `
=== VOLLST√ÑNDIGE HOCHZEITSANALYSE f√ºr ${budgetData.partner1Name} & ${budgetData.partner2Name} ===

üé≠ GRUNDLEGENDE DATEN
‚Ä¢ Hochzeitsdatum: ${budgetData.weddingDate} (${analysis.dayOfWeek}, ${analysis.monthOfYear})
‚Ä¢ G√§steanzahl: ${budgetData.guestCount} Personen
‚Ä¢ Gesamtbudget: ‚Ç¨${budgetData.totalBudget.toLocaleString('de-DE')}
‚Ä¢ Pro-Gast-Budget: ‚Ç¨${Math.round(analysis.pricePerGuest)}
‚Ä¢ Spezifische Location: ${budgetData.weddingLocation || 'Nicht angegeben'}
‚Ä¢ Venue-Typ: ${budgetData.venueType}

üíù BEZIEHUNGS-KONTEXT
‚Ä¢ Beziehungsdauer: ${budgetData.relationshipLength || 'Nicht angegeben'}
‚Ä¢ Kontakt: ${budgetData.email}${budgetData.phone ? ` | ${budgetData.phone}` : ''}

üí∞ BUDGET-DETAILS
‚Ä¢ Budget-Flexibilit√§t: ${budgetData.budgetFlexibility || 'Nicht angegeben'}
‚Ä¢ Finanzierungsquellen: ${budgetData.budgetSource?.join(', ') || 'Nicht angegeben'}
‚Ä¢ Budget-Herkunft gibt Aufschluss √ºber Entscheidungsspielraum und Risikotoleranz

üé® STIL & √ÑSTHETIK
‚Ä¢ Hochzeitsstil: ${budgetData.weddingStyle}
‚Ä¢ Farbschema: ${budgetData.colorScheme?.join(', ') || 'Nicht definiert'}
‚Ä¢ Tageszeit: ${budgetData.timeOfDay || 'Flexibel'}
‚Ä¢ Formalit√§tslevel: ${budgetData.formalityLevel || 'Nicht angegeben'}
‚Ä¢ Kulturelle Traditionen: ${budgetData.culturalTraditions?.join(', ') || 'Keine besonderen'}
‚Ä¢ Besondere Anforderungen: ${budgetData.specialRequirements || 'Keine'}

üéØ PRIORIT√ÑTEN-MATRIX
‚Ä¢ TOP-PRIORIT√ÑTEN: ${budgetData.topPriorities ? Object.entries(budgetData.topPriorities).map(([key, value]) => `${key}: ${value}/10`).join(', ') : 'Nicht definiert'}
‚Ä¢ MUST-HAVES: ${budgetData.mustHaves?.join(' | ') || 'Nicht definiert'}
‚Ä¢ NICE-TO-HAVES: ${budgetData.niceToHaves?.join(' | ') || 'Nicht definiert'}
‚Ä¢ DEAL-BREAKERS: ${budgetData.dealBreakers?.join(' | ') || 'Keine'}
‚Ä¢ Inspiration von: ${budgetData.inspirationSources?.join(', ') || 'Nicht angegeben'}

üìä MARKT-ANALYSE & RISIKEN
‚Ä¢ Budget-Percentile: ${analysis.budgetPercentile.toFixed(0)}. Perzentil (${this.getBudgetSegment(analysis.budgetPercentile)})
‚Ä¢ Saisonaler Faktor: ${analysis.seasonalFactor}x (${analysis.isHighSeason ? 'HOCHSAISON - Preise +20-40%' : 'Nebensaison - Sparpotential'})
‚Ä¢ Wochentag-Faktor: ${analysis.isWeekend ? 'Wochenende (+30-50%)' : 'Wochentag (-20-30%)'}
‚Ä¢ Regionale Preisanpassung: ${analysis.regionalMultiplier}x
‚Ä¢ Machbarkeits-Score: ${analysis.feasibilityScore}%
‚Ä¢ Identifizierte Risiken: ${analysis.riskFactors.join(' | ')}

=== AUFGABE: ULTRA-PERSONALISIERTE ANALYSE ===

Erstelle basierend auf ALLEN verf√ºgbaren Daten eine hochspezifische Empfehlung. Ber√ºcksichtige dabei:

1. üìã PRIORIT√ÑTEN-BASIERTE BUDGET-ALLOKATION
   - Analysiere die Top-Priorit√§ten und schlage eine entsprechende Budgetverteilung vor
   - Wenn Fotografie Must-Have ist: detaillierte Fotografen-Empfehlungen mit Preisen
   - Ber√ºcksichtige Deal-Breakers bei allen Vorschl√§gen

2. üé® STIL-KOH√ÑRENTE EMPFEHLUNGEN  
   - Kombiniere Hochzeitsstil + Farbschema + Formalit√§tslevel + Tageszeit
   - ${budgetData.weddingStyle} Stil + ${budgetData.colorScheme?.join('/')} + ${budgetData.timeOfDay} = spezifische Vendor-Kategorien
   - Kulturelle Traditionen in Timing und Ablauf einarbeiten

3. üí∞ BUDGET-FLEXIBILIT√ÑTS-STRATEGIEN
   - Bei "strikt": Exakte Kostenaufstellung mit 5% Puffer
   - Bei "flexibel": Upgrade-Optionen und Premium-Alternativen
   - Finanzierungsquelle ber√ºcksichtigen (Familie = andere Priorit√§ten als Eigenfinanzierung)

4. üìç LOCATION-SPEZIFISCHE OPTIMIERUNGEN
   - Konkrete Anbieter in/um ${budgetData.weddingLocation}
   - Regionale Besonderheiten und Preisstrukturen
   - Saisonale Verf√ºgbarkeiten am gew√§hlten Ort

5. ‚è∞ TIMING-OPTIMIERTE SPARTIPPS
   - Basierend auf ${budgetData.timeOfDay}: Brunch vs. Dinner vs. Nachmittag
   - Wochentag-Alternativen mit konkreten Ersparnissen
   - Saisonale Verschiebungs-Optionen

6. üö® RISIKO-SPEZIFISCHE ABSICHERUNG
   - Wetter-Backup f√ºr ${analysis.monthOfYear}-Hochzeit
   - Vendor-Ausf√§lle bei Hochsaison-Terminen  
   - Budget-√úberschreitungen in kritischen Bereichen

7. üéØ MUST-HAVE-OPTIMIERUNG
   - Jedes Must-Have mit konkretem Budget und Premium-Optionen
   - Alternative Anbieter falls Hauptwunsch nicht verf√ºgbar
   - Quality-vs-Cost Balance f√ºr jeden Must-Have Bereich

8. üîÑ FLEXIBLE SZENARIEN
   - Plan A: Vollbudget-Aussch√∂pfung f√ºr Luxusvariante
   - Plan B: ‚Ç¨${Math.round(budgetData.totalBudget * 0.85).toLocaleString('de-DE')} Ersparnis durch strategische Kompromisse  
   - Plan C: ‚Ç¨${Math.round(budgetData.totalBudget * 0.70).toLocaleString('de-DE')} Notspar-Szenario bei unvorhergesehenen Problemen

WICHTIG: 
- Jede Empfehlung mit KONKRETEN EURO-BETR√ÑGEN
- Spezifische Anbieter-Namen oder -Kategorien
- Ber√ºcksichtige ALLE Pr√§ferenzen und Constraints
- Sei ehrlich √ºber Machbarkeit vs. Wunschdenken
- Nutze die Inspirationsquellen f√ºr passende Referenzen

Erstelle eine Analyse, die zeigt, dass du JEDEN einzelnen Input verstanden und verarbeitet hast!

Formatiere die Antwort so:
EMPFEHLUNGEN:
- [Tipp 1]
- [Tipp 2]
...

SPARTIPPS:
- [Spartipp 1]
- [Spartipp 2]
...

PERSONALISIERTE RATSCHL√ÑGE:
- [Ratschlag 1]
- [Ratschlag 2]
...

RISIKOANALYSE:
- [Risiko 1]
- [Risiko 2]
...
    `
  }

  // Erweiterte Hilfsfunktionen
  private getBudgetSegment(percentile: number): string {
    if (percentile > 90) return 'Ultra-Luxus-Segment'
    if (percentile > 75) return 'Luxus-Segment'  
    if (percentile > 50) return 'Gehobenes Segment'
    if (percentile > 25) return 'Standard-Segment'
    return 'Budget-Segment'
  }

  private getRegionalMultiplier(location: string): number {
    if (!location) return 1.0
    const locationLower = location.toLowerCase()
    
    // Premium-Regionen
    if (locationLower.includes('m√ºnchen') || locationLower.includes('hamburg') || 
        locationLower.includes('k√∂ln') || locationLower.includes('d√ºsseldorf') ||
        locationLower.includes('frankfurt') || locationLower.includes('stuttgart')) {
      return 1.3
    }
    
    // Mittelgro√üe St√§dte
    if (locationLower.includes('berlin') || locationLower.includes('dresden') ||
        locationLower.includes('leipzig') || locationLower.includes('hannover')) {
      return 1.1
    }
    
    // L√§ndliche Gebiete
    return 0.9
  }

  private calculateFeasibilityScore(budgetData: BudgetData, pricePerGuest: number): number {
    let score = 50 // Basis-Score
    
    // Budget-realismus
    if (pricePerGuest >= 150) score += 30
    else if (pricePerGuest >= 100) score += 20
    else if (pricePerGuest >= 80) score += 10
    else score -= 20
    
    // G√§steanzahl-realismus
    if (budgetData.guestCount <= 80) score += 15
    else if (budgetData.guestCount <= 120) score += 10
    else score -= 10
    
    // Flexibilit√§t
    if (budgetData.budgetFlexibility === 'flexible') score += 15
    else if (budgetData.budgetFlexibility === 'strict') score -= 10
    
    return Math.max(0, Math.min(100, score))
  }

  private identifyRiskFactors(budgetData: BudgetData, analysis: DetailedAnalysis): string[] {
    const risks: string[] = []
    
    if (analysis.isHighSeason) {
      risks.push('Hochsaison-Preisaufschl√§ge')
    }
    
    if (analysis.isWeekend) {
      risks.push('Wochenend-Premiums')
    }
    
    if (analysis.pricePerGuest < 80) {
      risks.push('Unrealistisches Pro-Gast-Budget')
    }
    
    if (budgetData.guestCount > 150) {
      risks.push('Gro√üe G√§steanzahl = Logistik-Herausforderungen')
    }
    
    if (budgetData.budgetFlexibility === 'strict' && analysis.feasibilityScore < 70) {
      risks.push('Strenge Budget-Limits bei kritischen Marktbedingungen')
    }
    
    return risks
  }

  private parseAIResponse(response: string): AIRecommendation {
    console.log('üîç Parse Debug - Original Response:', response)
    console.log('üîç Parse Debug - Response enth√§lt EMPFEHLUNGEN:', response.includes('EMPFEHLUNGEN'))
    console.log('üîç Parse Debug - Response enth√§lt SPARTIPPS:', response.includes('SPARTIPPS'))
    
    const sections = {
      recommendations: [] as string[],
      savingTips: [] as string[],
      personalizedAdvice: [] as string[],
      riskAnalysis: [] as string[]
    }

    const lines = response.split('\n')
    let currentSection = ''

    for (const line of lines) {
      const trimmed = line.trim()
      
      if (trimmed.includes('EMPFEHLUNGEN:')) {
        currentSection = 'recommendations'
        console.log('üéØ Found EMPFEHLUNGEN section')
      } else if (trimmed.includes('SPARTIPPS:')) {
        currentSection = 'savingTips'
        console.log('üéØ Found SPARTIPPS section')
      } else if (trimmed.includes('PERSONALISIERTE RATSCHL√ÑGE:')) {
        currentSection = 'personalizedAdvice'
        console.log('üéØ Found PERSONALISIERTE RATSCHL√ÑGE section')
      } else if (trimmed.includes('RISIKOANALYSE:')) {
        currentSection = 'riskAnalysis'
        console.log('üéØ Found RISIKOANALYSE section')
      } else if (trimmed.startsWith('- ') && currentSection) {
        const content = trimmed.substring(2)
        if (content.length > 10) { // Filter out too short responses
          sections[currentSection as keyof typeof sections].push(content)
          console.log(`‚úÖ Added to ${currentSection}:`, content.substring(0, 50))
        }
      } else if (/^\d+\.\s/.test(trimmed) && currentSection) {
        // Handle numbered lists (1. , 2. , etc.)
        const content = trimmed.replace(/^\d+\.\s/, '')
        if (content.length > 10) {
          sections[currentSection as keyof typeof sections].push(content)
          console.log(`‚úÖ Added numbered item to ${currentSection}:`, content.substring(0, 50))
        }
      }
    }

    console.log('üéØ Final parsed sections:', {
      recommendations: sections.recommendations.length,
      savingTips: sections.savingTips.length,
      personalizedAdvice: sections.personalizedAdvice.length,
      riskAnalysis: sections.riskAnalysis.length
    })

    return sections
  }

  private generateRuleBasedRecommendations(budgetData: BudgetData): AIRecommendation {
    const pricePerGuest = budgetData.totalBudget / budgetData.guestCount
    
    const recommendations: string[] = []
    const savingTips: string[] = []
    const personalizedAdvice: string[] = []
    const riskAnalysis: string[] = []

    // Budget-based recommendations
    if (pricePerGuest < 120) {
      recommendations.push('üè° Bei eurem Budget empfehlen wir eine intime Feier im Garten oder einer g√ºnstigen Location')
      recommendations.push('ü§ù Bezieht Familie und Freunde aktiv in die Planung ein - viele helfen gerne')
      savingTips.push('üé® DIY-Dekoration kann bis zu 70% der Dekorationskosten sparen')
      savingTips.push('üì∏ Fragt Hobbyfotografen im Bekanntenkreis - oft g√ºnstiger als Profis')
    } else if (pricePerGuest < 200) {
      recommendations.push('üè® Hotels bieten oft All-Inclusive-Pakete an, die g√ºnstiger sind als Einzelbuchungen')
      recommendations.push('üì∏ Nachwuchsfotografen liefern oft genauso gute Ergebnisse f√ºr weniger Geld')
      savingTips.push('üç∞ Dessertbuffet statt Hochzeitstorte kann 300-600‚Ç¨ sparen')
      savingTips.push('üéµ DJ statt Live-Band spart 1000-2000‚Ç¨')
    } else {
      recommendations.push('üè∞ Mit eurem Budget sind auch exklusive Locations wie Schl√∂sser oder Weing√ºter m√∂glich')
      recommendations.push('‚ú® Investiert in Details, die lange in Erinnerung bleiben - Fotografie und Catering')
      savingTips.push('üìÖ Auch bei h√∂herem Budget: Unter der Woche heiraten spart 20-30%')
      savingTips.push('üå∏ Saisonale Blumen sind immer g√ºnstiger, auch im Luxussegment')
    }

    // Style-based advice
    if (budgetData.weddingStyle === 'rustic') {
      personalizedAdvice.push('üåæ Rustikaler Stil erlaubt viele DIY-Elemente - nutzt das f√ºr Kosteneinsparungen')
      personalizedAdvice.push('üèöÔ∏è Scheunen und Bauernh√∂fe sind authentisch und oft g√ºnstiger als Hotels')
      riskAnalysis.push('‚ö†Ô∏è Outdoor-Locations brauchen Backup-Pl√§ne f√ºr schlechtes Wetter')
    } else if (budgetData.weddingStyle === 'elegant') {
      personalizedAdvice.push('üíé Eleganter Stil: Weniger ist mehr - investiert in wenige, hochwertige Elemente')
      personalizedAdvice.push('üèõÔ∏è Klassische Locations wie Museen oder historische Geb√§ude unterstreichen den Stil')
      riskAnalysis.push('‚ö†Ô∏è Elegante Hochzeiten neigen zu Budget√ºberschreitungen bei Details')
    }

    // Season-based advice
    if (budgetData.season === 'summer') {
      riskAnalysis.push('‚ö†Ô∏è Sommerhochzeiten sind 25-40% teurer - fr√ºh buchen ist essentiell')
      savingTips.push('üåû Tageshochzeiten im Sommer sind g√ºnstiger als Abendfeiern')
    } else if (budgetData.season === 'winter') {
      personalizedAdvice.push('‚ùÑÔ∏è Winterhochzeiten haben ihren eigenen Charme und sind deutlich g√ºnstiger')
      savingTips.push('üïØÔ∏è Kerzen und warme Beleuchtung schaffen perfekte Winteratmosph√§re')
    }

    // General saving tips
    savingTips.push('üì± Digitale Einladungen sparen 200-500‚Ç¨ und sind umweltfreundlich')
    savingTips.push('üçæ Eigene Getr√§nke mitbringen (wo erlaubt) spart 30-50% der Getr√§nkekosten')
    savingTips.push('üöó Fahrgemeinschaften organisieren statt einzelner Transporte')

    // General risk analysis
    riskAnalysis.push('‚ö†Ô∏è 80% aller Hochzeiten √ºberschreiten das urspr√ºngliche Budget um 20-30%')
    riskAnalysis.push('‚ö†Ô∏è Versteckte Kosten (Trinkgelder, Extras, Last-Minute-√Ñnderungen) einplanen')

    return {
      recommendations: recommendations.slice(0, 6),
      savingTips: savingTips.slice(0, 8),
      personalizedAdvice: personalizedAdvice.slice(0, 4),
      riskAnalysis: riskAnalysis.slice(0, 3)
    }
  }

  private removePersonalData(budgetData: BudgetData): BudgetData {
    // üîí DSGVO-konforme Anonymisierung: Entferne pers√∂nliche Daten
    // ENTFERNT: partner1Name, partner2Name, email, phone, relationshipLength
    // BEHALTEN: weddingLocation, totalBudget, weddingStyle, venueType, etc.
    
    return {
      ...budgetData,
      // Anonymisiere pers√∂nliche Identifikatoren
      partner1Name: 'Partner A',
      partner2Name: 'Partner B', 
      email: 'anonymized@example.com',
      phone: undefined, // Falls vorhanden
      relationshipLength: undefined, // Falls vorhanden
      
      // BEHALTE alle planungsrelevanten Daten:
      // weddingLocation ‚úÖ (f√ºr lokale Anbieter-Empfehlungen)
      // totalBudget ‚úÖ (f√ºr Budget-Kategorisierung)
      // guestCount ‚úÖ (f√ºr Venue-Empfehlungen)
      // weddingStyle ‚úÖ (f√ºr Stil-angepasste Empfehlungen)
      // venueType ‚úÖ (f√ºr Location-Empfehlungen)
      // season ‚úÖ (f√ºr saisonale Preise)
      // weddingDate ‚úÖ (nur f√ºr Saison-Bestimmung)
      // topPriorities ‚úÖ (f√ºr personalisierte Empfehlungen)
    }
  }
}

export const aiService = new AIService() 